#!/bin/bash

if ! shopt -q login_shell ; then
  source /etc/profile
fi

#echo "CALL: $*"

: ${DEPLOYER:="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"}

. ${DEPLOYER}/lib/user-config.sh
. ${DEPLOYER}/lib/libcommon2.sh
. ${DEPLOYER}/lib/libiam.sh
. ${DEPLOYER}/lib/libjdk.sh
. ${DEPLOYER}/lib/librcu.sh
. ${DEPLOYER}/lib/libiamhelp.sh
. ${DEPLOYER}/lib/libuserenv.sh

umask ${iam_user_umask}

#  main program -----------------------------------------------------
#
#  remember original parameters for host calls
orig_params="${@}"

if   [ $# -lt 1 ] ; then
  iamhelp       # not enough params
elif [ $# -ge 1 ] ; then
  cmd=${1}      # command entered
  shift
fi

while getopts D:H:O:P:a:s:nt:u:p:w:LAh FLAG; do
  case ${FLAG} in
    D)  opt_D=${OPTARG} ;;
    H)  opt_H=${OPTARG} ;;
    O)  opt_O=${OPTARG} ;;
    P)  opt_P=${OPTARG} ;;
    a)  opt_a=${OPTARG} ;;
    s)  opt_s=${OPTARG} ;;
    n)  opt_n=yes       ;;
    t)  opt_t=${OPTARG} ;;
    u)  opt_u=${OPTARG} ;;
    p)  opt_p=${OPTARG} ;;
    w)  opt_w=${OPTARG} ;;
    L)  opt_L=yes ;;
    A)  opt_A=yes ;;
    h)  opt_h=yes     ;;
    \?) # unrecognized option - show help
      echo -e \\n"Option -${BOLD}${OPTARG}${NORM} not allowed."
      iamhelp
      ;;
  esac
done

set -o errexit

#  convert a remote host call to a recursive call
#
if [ -n "${opt_H}" ] ; then
  #  remove remote host flag from parameters for recursive call
  ssh ${opt_H} -- DEPLOYER=${DEPLOYER} ${DEPLOYER}/iam \
    $(echo "${orig_params}" | sed -E -e 's/-H [a-zA-Z0-9\-]+//')
else

  case ${cmd} in

    help)
      iamhelp
      ;;

    ssh-key)
      if   [ -n "${opt_a}" -a "${opt_a}" == "generate" ] ; then
        gen_ssh_keypair ${opt_t}
      elif [ -n "${opt_a}" -a "${opt_a}" == "deploy"   ] ; then
        deploy_ssh_keypair \
          ${opt_s:-${DEPLOYER}/lib/templates/hostenv/ssh}
      elif [ -n "${opt_a}" -a "${opt_a}" == "add"      ] ; then
        add_known_hosts
      else
        help_ssh_keys
        exit $ERROR_SYNTAX_ERROR
      fi

      if   [ -z "${opt_h}" ] ; then
        copy_ssh_key
      else
        help_ssh_key
        exit $ERROR_SYNTAX_ERROR
      fi
  
      ;;
  
    orainv)
      if [ "${opt_h}" != "yes" ] ; then
        create_orainvptr
      else
        help_orainv 
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;
  
    lcm)
      if [ "${opt_h}" != "yes" ] ; then
        deploy_lcm
      else
        help_lcm
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;
  
    rcu)
      if [ "${opt_a}" == "create" -a -n "${opt_t}" ]
      then
        log "*** Creating schemas ***"
        if [[ -t 1 ]]; then
          log "  press RETURN to continue or Ctrl-C to stop"
          read cont
        fi
        rcu_${opt_t} | strings 
      elif [ "${opt_a}" == "remove" -a -n "${opt_t}" ]
      then
        log "*** Dropping schemas ***"
        if [[ -t 1 ]]; then
          log "  press RETURN to continue or Ctrl-C to stop"
          read cont
        fi
        rcu_drop_${opt_t} | strings
      else
        help_rcu
        exit $ERROR_SYNTAX_ERROR
      fi

      ;;
    prov)
      if [ "${opt_h}" != "yes" ] ; then
        iam_prov
      else
        help_prov
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    userenv)
      if   [ "${opt_a}" == "env"     ] ; then
        init_userenv
      elif [ "${opt_a}" == "profile" ] ; then
        extend_bash_profile_on_host
      else
        help_userenv
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    keyfile)
      load_userenv common
      [[ "${opt_D}" == "identity" ]] && load_userenv idm
      [[ "${opt_D}" == "access"   ]] && load_userenv idm

      if   [ "${opt_t}" == "domain"      -a -n "${opt_D}" ] ; then
        load_userenv common
        create_domain_keyfiles ${opt_D}
      elif [ "${opt_t}" == "nodemanager" -a -n "${opt_D}" ] ; then
        load_userenv common
        create_nm_keyfiles     ${opt_D}
      else
        help_keyfile
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    jdk)
      if   [ -n "${opt_O}" -a -z "${opt_h}" ] ; then
        if [ -n "${opt_P}" -a "${opt_P}" == "2" ] ; then
          upgrade_jdk2 ${opt_O}
        else
          upgrade_jdk1 ${opt_O}
        fi
      else
        help_jdk
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    rcd)
      if   [ -n "${opt_t}" ] ; then
        # TODO: implement runlevel scripts
        echo "deploy rc.d scripts.."
      else
        help_rcd
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    weblogic)
      load_userenv common

      if   [ "${opt_a}" == "jdk7fix"  -a -n "${opt_t}" -a -z "${opt_h}" ] ; then
        patch_wls_bin  ${opt_t}
      elif [ "${opt_a}" == "wlstlibs" -a -n "${opt_t}" -a -z "${opt_h}" ] ; then
        wlst_copy_libs ${opt_t}
      else
        help_weblogic
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    identity)
      load_userenv common
      load_userenv idm

      if   [ "${opt_a}" == "jdk7fix"     -a -z "${opt_h}" ] ; then
        patch_wls_domain ${opt_t}
      elif [ "${opt_a}" == "psa"         -a -z "${opt_h}" ] ; then
        run_psa identity
      elif [ "${opt_a}" == "keyfile"     -a -z "${opt_h}" -a -z "${opt_n}" ] ; then
        # domain keyfile
        : ${opt_u:=${domiUser}}
        : ${opt_p:=${domiPwd}}
        : ${opt_w:="${iam_hostenv}/env/identity.prop"}
        if [[ ! -a ${opt_w} ]] ;  then
          error "Domain property file not found. Please run userenv!"
          exit $ERROR_FILE_NOT_FOUND
        fi
        create_domain_keyfile 
      elif [ "${opt_a}" == "keyfile"     -a -z "${opt_h}" -a -n "${opt_n}" ] ; then
        # nodemanager keyfile
        : ${opt_u:=${nmUser}}
        : ${opt_p:=${nmPwd}}
        : ${opt_w:="${iam_hostenv}/env/identity.prop"}
        if [[ ! -a ${opt_w} ]] ;  then
          error "Domain property file not found. Please run userenv!"
          exit $ERROR_FILE_NOT_FOUND
        fi
        create_nodemanager_keyfile 
      elif [ "${opt_a}" == "config"      -a -z "${opt_h}" ] ; then
        config_identity
      elif [ "${opt_a}" == "movelogs"    -a -z "${opt_h}" ] ; then
        move_logs identity
      else
        help_identity
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    access)
      load_userenv common
      load_userenv acc

      if   [ "${opt_a}" == "jdk7fix2"    -a -z "${opt_h}" ] ; then
        patch_wls_domain ${opt_t}
      elif [ "${opt_a}" == "psa"         -a -z "${opt_h}" ] ; then
        run_psa access
      elif [ "${opt_a}" == "keyfile"     -a -z "${opt_h}" -a -z "${opt_n}" ] ; then
        ${opt_u:=${domaUser}}
        ${opt_p:=${domaPwd}}
        ${opt_w:="${iam_hostenv}/env/access.prop"}
        if [[ ! -a ${opt_w} ]] ;  then
          error "Domain property file not found. Please run userenv!"
          exit $ERROR_FILE_NOT_FOUND
        fi
        create_domain_keyfile 
      elif [ "${opt_a}" == "keyfile"     -a -z "${opt_h}" -a -n "${opt_n}" ] ; then
        ${opt_u:=${nmUser}}
        ${opt_p:=${nmPwd}}
        ${opt_w:="${iam_hostenv}/env/access.prop"}
        if [[ ! -a ${opt_w} ]] ;  then
          error "Domain property file not found. Please run userenv!"
          exit $ERROR_FILE_NOT_FOUND
        fi
        create_nodemanager_keyfile 
      elif [ "${opt_a}" == "config"      -a -z "${opt_h}" ] ; then
        config_access
      elif [ "${opt_a}" == "movelogs"    -a -z "${opt_h}" ] ; then
        move_logs access
      else
        help_access
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    analytics)
      if   [ "${opt_a}" == "unpack"      -a -z "${opt_h}" ] ; then
        # WARNING: function not implemented
        analytics_unpack
      elif [ "${opt_a}" == "patch"       -a -z "${opt_h}" ] ; then
        # WARNING: function not implemented
        analytics_patch
      elif [ "${opt_a}" == "domprov"     -a -z "${opt_h}" ] ; then
        # WARNING: function not implemented
        analytics_domprov
      else
        help_analytics
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    directory)
      if   [ "${opt_a}" == "postinstall" -a -z "${opt_h}" ] ; then
        patch_oud_post_inst
      elif [ "${opt_a}" == "harden"      -a -z "${opt_h}" ] ; then
        apply_oud_tls_settings
      elif [ "${opt_a}" == "movelogs"    -a -z "${opt_h}" ] ; then
        move_logs dir
      else
        help_directory
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    webtier)

      if   [ "${opt_a}" == "postinstall" -a -z "${opt_t}" ] ; then
        postinst webtier
      elif [ "${opt_a}" == "movelogs"    -a -z "${opt_t}" ] ; then
        move_logs webtier
      else
        help_webtier
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    remove)
      if [ -n "${opt_A}" ];
      then
        for _host in ${provhosts[@]};
        do
          echo "${0} remove -${opt_L} -H ${_host}"
          ${0} remove -${opt_L} -H ${_host}
        done
      elif [ -n "${opt_L}" ];
      then
        remove_iam ${opt_L}
      else
        help_remove
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    *) # unrecognized option - show help
      iamhelp
      ;;
  esac

fi

exit 0
