#!/bin/bash

WARNING_DONE=0
ERROR_FILE_NOT_FOUND=80
ERROR_SYNTAX_ERROR=81
ERROR_WLST=82

if ! shopt -q login_shell ; then
  source /etc/profile
fi

: ${DEPLOYER:="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"}

. ${DEPLOYER}/lib/user-config.sh
. ${DEPLOYER}/lib/libcommon2.sh
. ${DEPLOYER}/lib/libiam.sh

umask ${iam_user_umask}

#  main program -----------------------------------------------------
#
#  remember original parameters for host calls
orig_params="${@}"

if   [ $# -lt 1 ] ; then
  iamhelp       # not enough params
  exit $ERROR_SYNTAX_ERROR
elif [ $# -ge 1 ] ; then
  echo -e "\n"
  log "HOST $(hostname -s) >> IAM >> $*"
  cmd=${1}      # command entered
  shift
fi


while getopts AH:O:P:T:a:hnp:qs:t:u:w: FLAG; do
  case ${FLAG} in
    A)  opt_A=yes       ;;  # execute on all hosts
    H)  opt_H=${OPTARG} ;;  # execute on host stated
    O)  opt_O=${OPTARG} ;;  # Oracle home to upgrade
    P)  opt_P=${OPTARG} ;;  # pack or unpack (OIA rdeploy)
    T)  opt_T=${OPTARG} ;;  # topology (OIA)
    a)  opt_a=${OPTARG} ;;  # action to perform
    h)  opt_h=yes       ;;  # help
    n)  opt_n=yes       ;;  # nodemanager (keyfiles)
    p)  opt_p=yes       ;;  # password
    q)  opt_q=${OPTARG} ;;  # quiet mode
    s)  opt_s=${OPTARG} ;;  # source
    t)  opt_t=${OPTARG} ;;  # target
    f)  opt_f=${OPTARG} ;;  # file name
    u)  opt_u=${OPTARG} ;;  # username
    w)  opt_w=${OPTARG} ;;  # wlst property file path
    \?) # unrecognized option - show help
      echo -e \\n"Option -${BOLD}${OPTARG}${NORM} not allowed."
      iamhelp
      exit $ERROR_SYNTAX_ERROR
      ;;
  esac
done

# stop on errors, whereever
set -o errexit
set -o errtrace

# verbose output
[[ -z "${opt_q}" ]] && set -o xtrace


if   [ -n "${opt_H}" ] ; then

  #  -H host: convert a remote host call to a recursive call
  #  remove remote host flag from parameters for recursive call
  ssh ${opt_H} -- DEPLOYER=${DEPLOYER} ${DEPLOYER}/iam \
    $(echo "${orig_params}" | sed -E -e 's/-H [a-zA-Z0-9\-\.]+//')
  [[ $? ]] || exit

elif [ -n "${opt_A}" ] ; then

  #  -A: execute on all hosts
  #  execute on all hosts
  for _host in ${provhosts[@]} ; do
    ssh ${_host} -- DEPLOYER=${DEPLOYER} ${DEPLOYER}/iam \
      $(echo "${orig_params}" | sed -E -e 's/-A//')
    [[ $? ]] || exit
  done

else

  case ${cmd} in

    create)
      if   [ -n "${opt_h}" ] ; then
        help_create
        exit $ERROR_SYNTAX_ERROR
      else
        create ${opt_f:-${DEPLOYER}/user-config/workflow.sh}
      fi
      ;;

    provision)
      if   [ -n "${opt_h}" ] ; then
        help_provision
        exit $ERROR_SYNTAX_ERROR
      else
        exec ${opt_f:-${DEPLOYER}/user-config/workflow.sh}
      fi
      ;;

    ssh-key)
      if   [ -n "${opt_a}" -a "${opt_a}" == "generate" ] ; then
        gen_ssh_keypair ${opt_t}
      elif [ -n "${opt_a}" -a "${opt_a}" == "deploy"   ] ; then
        deploy_ssh_keypair \
          ${opt_s:-${DEPLOYER}/lib/templates/hostenv/ssh}
      elif [ -n "${opt_a}" -a "${opt_a}" == "add"      ] ; then
        add_known_hosts
      else
        help_ssh_keys
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    orainv)
      if [ "${opt_h}" != "yes" ] ; then
        create_orainvptr
      else
        help_orainv 
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;
  
    lcminst)
      if [ "${opt_h}" != "yes" ] ; then
        deploy_lcm
      else
        help_lcminst
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    rcu)
      if [ -n "${opt_t}" -a -n "${opt_a}" ] ; then
        run_rcu ${opt_a} ${opt_t}
      else
        help_rcu
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    lcmstep)
      if [ -n "${opt_a}" -a "${opt_h}" != "yes" ] ; then
        lcmstep ${opt_a}
        echo "RET iam: ${?}"
      else
        help_lcmstep
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    userenv)
      if   [ "${opt_a}" == "env"     ] ; then
        init_userenv
      elif [ "${opt_a}" == "profile" ] ; then
        extend_bash_profile_on_host
      else
        help_userenv
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    jdk)
      if   [ "${opt_a}" == "install7" -a -n "${opt_O}" -a -z "${opt_h}" ] ; then
        mkdir -p ${iam_top}/products/${opt_O}
        jdk_install7 ${opt_O}
      elif [ "${opt_a}" == "move6"    -a -n "${opt_O}" -a -z "${opt_h}" ] ; then
        jdk_move6    ${opt_O}
      else
        help_jdk
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    rcd)
      if   [ -n "${opt_t}" ] ; then
        # TODO: implement runlevel scripts
        echo "deploy rc.d scripts.."
      else
        help_rcd
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    weblogic)
      load_userenv common

      if   [ "${opt_a}" == "jdk7fix"  -a -n "${opt_t}" -a -z "${opt_h}" ] ; then
        patch_wls_bin  ${opt_t}
      elif [ "${opt_a}" == "wlstlibs" -a -n "${opt_t}" -a -z "${opt_h}" ] ; then
        wlst_copy_libs ${opt_t}
      elif [ "${opt_a}" == "install"  -a -n "${opt_t}" -a -z "${opt_h}" ] ; then
        weblogic_install ${opt_t}
      else
        help_weblogic
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    identity)
      load_userenv common
      load_userenv idm

      if   [ "${opt_a}" == "jdk7fix"  -a -z "${opt_h}" ] ; then
        patch_wls_domain identity
      elif [ "${opt_a}" == "psa"      -a -z "${opt_h}" ] ; then
        run_psa identity
      elif [ "${opt_a}" == "keyfile"  -a -z "${opt_h}" -a -z "${opt_n}" ] ; then
        # domain keyfile
        : ${opt_u:=${domiUser}}
        : ${opt_p:=${domiPwd}}
        : ${opt_w:="${iam_hostenv}/.env/identity.prop"}
        if ! [ -a ${opt_w} ] ;  then
          error "Domain property file not found. Please run userenv!"
          exit $ERROR_FILE_NOT_FOUND
        fi
        create_domain_keyfile 
      elif [ "${opt_a}" == "keyfile"  -a -z "${opt_h}" -a -n "${opt_n}" ] ; then
        # nodemanager keyfile
        : ${opt_u:=${nmUser}}
        : ${opt_p:=${nmPwd}}
        : ${opt_w:="${iam_hostenv}/.env/identity.prop"}
        if ! [ -a ${opt_w} ] ;  then
          error "Domain property file not found. Please run userenv!"
          exit $ERROR_FILE_NOT_FOUND
        fi
        create_nodemanager_keyfile 
      elif [ "${opt_a}" == "config"   -a -z "${opt_h}" ] ; then
        config_identity
      elif [ "${opt_a}" == "movelogs" -a -z "${opt_h}" ] ; then
        move_logs identity
      else
        help_identity
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    access)
      load_userenv common
      load_userenv acc

      if   [ "${opt_a}" == "jdk7fix"     -a -z "${opt_h}" ] ; then
        patch_wls_domain access
      elif [ "${opt_a}" == "psa"         -a -z "${opt_h}" ] ; then
        run_psa access
      elif [ "${opt_a}" == "keyfile"     -a -z "${opt_h}" -a -z "${opt_n}" ] ; then
        ${opt_u:=${domaUser}}
        ${opt_p:=${domaPwd}}
        ${opt_w:="${iam_hostenv}/.env/access.prop"}
        if ! [ -a ${opt_w} ] ;  then
          error "Domain property file not found. Please run userenv!"
          exit $ERROR_FILE_NOT_FOUND
        fi
        create_domain_keyfile 
      elif [ "${opt_a}" == "keyfile"     -a -z "${opt_h}" -a -n "${opt_n}" ] ; then
        ${opt_u:=${nmUser}}
        ${opt_p:=${nmPwd}}
        ${opt_w:="${iam_hostenv}/.env/access.prop"}
        if ! [ -a ${opt_w} ] ;  then
          error "Domain property file not found. Please run userenv!"
          exit $ERROR_FILE_NOT_FOUND
        fi
        create_nodemanager_keyfile 
      elif [ "${opt_a}" == "config"      -a -z "${opt_h}" ] ; then
        config_access
      elif [ "${opt_a}" == "movelogs"    -a -z "${opt_h}" ] ; then
        move_logs access
      else
        help_access
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    analytics)
      load_userenv common
      load_userenv oia

      if   [ "${opt_a}" == "domcreate"   -a -n "${opt_T}" -a -z "${opt_h}" ] ; then
        oia_dom_prop ${opt_T}
        oia_wlst_exec wlstdom ${opt_T}
      elif [ "${opt_a}" == "keyfile"     -a -z "${opt_h}" ] ; then
        # nodemanager keyfile
        : ${opt_u:=${nmUser}}
        : ${opt_p:=${nmPwd}}
        : ${opt_w:="${iam_hostenv}/env/analytics.prop"}
        if [[ ! -a ${opt_w} ]] ;  then
          error "Domain property file not found. Please run userenv!"
          exit $ERROR_FILE_NOT_FOUND
        fi
        create_nodemanager_keyfile 
      elif [ "${opt_a}" == "domconfig"    -a -z "${opt_h}" ] ; then
        oia_domconfig
      elif [ "${opt_a}" == "rdeploy"      -a -n "${opt_P}" -a -z "${opt_h}" ] ; then
        oia_rdeploy ${opt_P}
      elif [ "${opt_a}" == "explode"      -a -z "${opt_h}" ] ; then
        oia_explode
      elif [ "${opt_a}" == "appconfig"    -a -n "${opt_T}" -a -z "${opt_h}" ] ; then
        oia_appconfig ${opt_T}
      elif [ "${opt_a}" == "oimintegrate" -a -z "${opt_h}" ] ; then
        oia_oim_integrate
      elif [ "${opt_a}" == "wlsdeploy"    -a -z "${opt_h}" ] ; then
        deploy rbacx
      else
        help_analytics
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    directory)
      if   [ "${opt_a}" == "postinstall" -a -z "${opt_h}" ] ; then
        patch_oud_post_inst
      elif [ "${opt_a}" == "harden"      -a -z "${opt_h}" ] ; then
        apply_oud_tls_settings
      elif [ "${opt_a}" == "movelogs"    -a -z "${opt_h}" ] ; then
        move_logs dir
      else
        help_directory
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    webtier)
      load_userenv common
      load_userenv web

      if   [ "${opt_a}" == "config"   -a -z "${opt_h}" ] ; then
        httpd_config
      elif [ "${opt_a}" == "movelogs" -a -z "${opt_h}" ] ; then
        move_logs webtier
      else
        help_webtier
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    remove)
      if   [ -z "${opt_h}" -a -n "${opt_t}" -a "${opt_t}" == "identity" ] ; then
        error "not implemented yet, choose optional <all>"
      elif [ -z "${opt_h}" -a -n "${opt_t}" -a "${opt_t}" == "analytics" ] ; then
        remove_oia
      elif [ -z "${opt_h}" -a -n "${opt_t}" -a "${opt_t}" == "lcm" ] ; then
        remove_lcm
      elif [ -z "${opt_h}" -a -n "${opt_t}" -a "${opt_t}" == "env" ] ; then
        remove_env
      elif [ -z "${opt_h}" -a -n "${opt_t}" -a "${opt_t}" == "all" ] ; then
        remove_oia ; remover_env ; remove_iam ; remove_lcm
      else
        help_remove
        exit $ERROR_SYNTAX_ERROR
      fi
      ;;

    help)
      # 'iam help identity' or 'iam help'
      if [ $# -gt 1 ] ; then
        if type ${2} >/dev/null 2>&1 ; then
          eval "help_${2}"
        else
          echo "ERROR: unknown command"
          exit $ERROR_SYNTAX_ERROR
        fi
      else
        iamhelp
      fi
      ;;

    *) # unrecognized option - show help
      iamhelp
      exit $ERROR_SYNTAX_ERROR
      ;;
  esac

fi

exit 0
