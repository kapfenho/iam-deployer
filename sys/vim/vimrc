" for a better vim...
"
if v:progname =~? "evim"
  finish
endif

set nocompatible
filetype plugin indent on

set number
set ruler
set showcmd
syntax enable
set scrolloff=3
" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("gui_running")
  set mouse=a
endif

set hidden
set encoding=utf-8

set nowrap
set tabstop=8
set shiftwidth=2
set softtabstop=2
set expandtab
set smarttab autoindent
" set list listchars=tab:\ \ ,trail:Â·

" Searching
set hlsearch
set incsearch
" set ignorecase
set smartcase
set showcmd

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

set laststatus=2
set statusline=
set statusline+=%-3.3n\                       " buffer name
set statusline+=%f\                           " filename
set statusline+=%h%m%r%w                      " status flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}]  " file type
set statusline+=%=                            " right align remainder
set statusline+=0x%-8B                        " character value
set statusline+=%-14(%l,%c%V%)                " line, character
set statusline+=%<%P                          " file position

" formatoptions
" set formatoptions-=orc
set pastetoggle=
" autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" autocmd FileType * setlocal fo-=orc

" leader setting and keep ,
let mapleader=","
noremap \ ,

" Command-T configuration
"let g:CommandTMaxHeight=20

" ZoomWin configuration
" map <Leader><Leader> :ZoomWin<CR>

" CTags
" map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
" map <C-\> :tnext<CR>

" Remember last location in file
if has("autocmd")
  au FileType * setlocal formatoptions=tnq
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

command! -nargs=* Wrap set wrap linebreak nolist

function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Hammer<CR>
endfunction

" make uses real tabs
au FileType make set noexpandtab

au BufRead,BufNewFile *.schema set ft=ldapschema
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()
au BufRead,BufNewFile *.json set ft=javascript
au BufRead,BufNewFile *.txt call s:setupWrapping()
" make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79
" Indent for XML files
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
au FileType txt set fo=tnqa

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Unimpaired configuration
" Bubble single lines
" nmap <C-Up> [e
" nmap <C-Down> ]e
" Bubble multiple lines
" vmap <C-Up> [egv
" vmap <C-Down> ]egv

" nnoremap <silent> [b :bprevious<CR>
" nnoremap <silent> ]b :bnext<CR>
" nnoremap <silent> [B :bfirst<CR>
" nnoremap <silent> ]B :blast<CR>

" Enable syntastic syntax checking
" let g:syntastic_enable_signs=1
" let g:syntastic_quiet_warnings=1

" gist-vim defaults
" if has("mac")
"   let g:gist_clip_command = 'pbcopy'
" elseif has("unix")
"   let g:gist_clip_command = 'xclip -selection clipboard'
" endif
" let g:gist_detect_filetype = 1
" let g:gist_open_browser_after_post = 1

let g:csv_autocmd_arrange = 1
aug CSV_Editing
    au!
    au BufRead,BufWritePost *.csv :%ArrangeColumn
    au BufWritePre *.csv :%UnArrangeColumn
aug end

set modeline
set modelines=10

silent! execute pathogen#infect()
let g:solarized_termcolors=256
" set background=light
set background=dark
colorscheme desert
silent! colorscheme solarized

set backupdir=~/.vim/backup/,/tmp/
set directory=~/.vim/backup/,/tmp/
" set nobackup
" set nowritebackup

" let g:JSLintHighlightErrorLine = 0

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1

" % to bounce from do to end etc.
runtime! macros/matchit.vim

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

